# vim:ft=cfg

[supervisord]
nodaemon=true
; (main log file;default $CWD/supervisord.log)
logfile=/supervisor/log/supervisord.log
; (supervisord pidfile;default supervisord.pid)
pidfile=/supervisor/run/supervisord.pid
; ('AUTO' child log dir, default $TEMP)
childlogdir=/supervisor/log/services

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[unix_http_server]
file=/supervisor/run/supervisor.sock   ; (the path to the socket file)
chmod=0700                       ; sockef file mode (default 0700)

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///supervisor/run/supervisor.sock ; use a unix:// URL  for a unix socket

[include]
files = /config/supervisord/supervisor-*.conf


# We at least want to run consul-template, getting the configuration from Consul.
[program:consul-template]
command=consul-template -config=/config/consul-template/ -consul=%(ENV_CONSUL_URI)s
stdout_logfile=/dev/fd/2
stdout_logfile_maxbytes=0
stderr_logfile=/dev/fd/2
stderr_logfile_maxbytes=0


# If a process goes into FATAL state, supervisord probably can't do anything to
# it anymore. It's probably better to just stop running supervisord (which is
# supposed to be the main process of the running Docker container), which will
# stop the Docker container and signal whatever manages Docker that the
# container failed.
# Otherwise, supervisord will keep running although the interesting process it
# manages doesn't work, and the Docker container will then still be running
# although it won't provide anything anymore.
[eventlistener:on-fatal-stop-supervisord]
command=/supervisor/stop-supervisord.py /supervisor/run/supervisord.pid
events=PROCESS_STATE_FATAL
